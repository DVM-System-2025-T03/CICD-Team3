name: team3

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest

    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarCloud 분석에 필요

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake lcov gcc g++

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Install Build Wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      - name: Run Build Wrapper
        run: |
          rm -rf build   # 이전 빌드 폴더 삭제
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          build-wrapper-linux-x86-64 --out-dir $BUILD_WRAPPER_OUT_DIR cmake --build build --config Debug

      - name: Zero counters (coverage 초기화)
        run: lcov --directory build --zerocounters

      # 테스트 실행(반드시 GoogleTest Test가 실행되어야 커버리지 파일 생김)
      - name: Run GoogleTest
        run: |
          cd build
          ctest --output-on-failure

      # 커버리지 info 생성 및 불필요 경로 제외, 매칭/empty 에러 무시 옵션 추가!
      - name: Capture coverage info
        run: |
          lcov --directory build --capture --output-file coverage.info --ignore-errors mismatch,empty
          lcov --remove coverage.info '/usr/*' '*/test/*' --output-file coverage.info
          lcov --list coverage.info || true

      # SonarCloud로 최종 업로드
      - name: Analyze on SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.ORGANIZATION_KEY }}
            -Dsonar.cfamily.build-wrapper-output=$BUILD_WRAPPER_OUT_DIR
            -Dsonar.cfamily.gcov.reportsPath=build

      # 빌드 성공 시 Discord 알림
      - name: Discord Success Notification
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: '✅ **빌드 성공**: ${{ github.repository }} - ${{ github.workflow }} 워크플로우 성공!'

      # 빌드 실패 시 Discord 알림
      - name: Discord Failure Notification
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: '❌ **빌드 실패**: ${{ github.repository }} - ${{ github.workflow }} 워크플로우 실패! 확인 필요!'
